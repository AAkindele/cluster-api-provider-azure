apiVersion: controlplane.cluster.x-k8s.io/v1alpha4
kind: KubeadmControlPlane
metadata:
  name: "${CLUSTER_NAME}-control-plane"
  annotations:
    controlplane.cluster.x-k8s.io/skip-kube-proxy: "true"
spec:
  kubeadmConfigSpec:
    useExperimentalRetryJoin: true
    clusterConfiguration:
      kubernetesVersion: "${KUBERNETES_VERSION}"
    postKubeadmCommands:
    - bash -c /tmp/replace-k8s-components.sh
    files:
    - path: /tmp/replace-k8s-components.sh
      owner: "root:root"
      permissions: "0744"
      content: |
        #!/bin/bash

        retrycmd() {
          retries=$1; wait_sleep=$2; timeout=$3; shift && shift && shift
          for i in $(seq 1 $retries); do
            timeout $timeout $@ && break ||
              if [ $i -eq $retries ]; then
                return 1
              else
                sleep $wait_sleep
              fi
          done
          echo Executed $i times
        }
        retrycmd_get_tarball() {
          tar_retries=$1; wait_sleep=$2; tarball=$3; url=$4
          for i in $(seq 1 $tar_retries); do
            tar -tzf $tarball && break ||
              if [ $i -eq $tar_retries ]; then
                return 1
              else
                timeout 60 curl -fsSL $url -o $tarball
                sleep $wait_sleep
              fi
          done
        }

        mkdir -p $HOME/.kube || exit 1
        cp -i /etc/kubernetes/admin.conf $HOME/.kube/config || exit 1
        chown $(id -u):$(id -g) $HOME/.kube/config || exit 1
        # wait for the cluster to come online based on the default kubeadm configuration
        retrycmd 120 5 10 /usr/bin/kubectl 2>/dev/null cluster-info || exit 1
        if [ -n "${KUBE_BINARY_URL}" ]; then
          # stop the kubelet on this node so we can replace it
          retrycmd 10 5 10 systemctl stop kubelet || exit 1
          retrycmd_get_tarball 120 5 /tmp/kube-binary.tar.gz ${KUBE_BINARY_URL} || exit 1
          tar -xzvf /tmp/kube-binary.tar.gz --strip-components=3 -C /usr/bin kubernetes/node/bin/kubelet || exit 1
          tar -xzvf /tmp/kube-binary.tar.gz --strip-components=3 -C /usr/bin kubernetes/node/bin/kubectl || exit 1
          chmod +x /usr/bin/kubelet /usr/bin/kubectl || exit 1
          retrycmd 10 5 10 systemctl start kubelet || exit 1
          # wait for the cluster to come back online
          retrycmd 120 5 10 /usr/bin/kubectl 2>/dev/null cluster-info || exit 1
        fi
        if [ -n "${KUBE_PROXY_IMAGE_URL}" ]; then
          retrycmd 10 5 10 kubectl -n kube-system set image daemonset/kube-proxy kube-proxy=${KUBE_PROXY_IMAGE_URL} || exit 1
        fi
        if [ -n "${KUBE_APISERVER_IMAGE_URL}" ] || [ -n "${KUBE_CONTROLLER_MANAGER_IMAGE_URL}" ] || [ -n "${KUBE_SCHEDULER_IMAGE_URL}" ]; then
          retrycmd_get_tarball 120 5 /tmp/yq_linux_amd64.tar.gz https://github.com/mikefarah/yq/releases/download/v4.6.1/yq_linux_amd64.tar.gz || exit 1
          tar -xzvf /tmp/yq_linux_amd64.tar.gz -C /tmp && mv /tmp/yq_linux_amd64 /usr/bin/yq || exit 1
        fi
        if [ -n "${KUBE_APISERVER_IMAGE_URL}" ]; then
          yq e '.spec.containers[0].image = "${KUBE_APISERVER_IMAGE_URL}"' -i /etc/kubernetes/manifests/kube-apiserver.yaml || exit 1
        fi
        if [ -n "${KUBE_CONTROLLER_MANAGER_IMAGE_URL}" ]; then
          yq e '.spec.containers[0].image = "${KUBE_CONTROLLER_MANAGER_IMAGE_URL}"' -i /etc/kubernetes/manifests/kube-controller-manager.yaml || exit 1
        fi
        if [ -n "${KUBE_SCHEDULER_IMAGE_URL}" ]; then
          yq e '.spec.containers[0].image = "${KUBE_SCHEDULER_IMAGE_URL}"' -i /etc/kubernetes/manifests/kube-scheduler.yaml || exit 1
        fi
    - path: /etc/kubernetes/azure.json
      owner: "root:root"
      permissions: "0644"
      contentFrom:
        secret:
          key: control-plane-azure.json
          name: ${CLUSTER_NAME}-control-plane-azure-json
---
apiVersion: bootstrap.cluster.x-k8s.io/v1alpha4
kind: KubeadmConfigTemplate
metadata:
  name: ${CLUSTER_NAME}-md-0
spec:
  template:
    spec:
      postKubeadmCommands:
        - bash -c /tmp/replace-k8s-components.sh
      files:
        - path: /tmp/replace-k8s-components.sh
          owner: "root:root"
          permissions: "0744"
          content: |
            #!/bin/bash

            retrycmd() {
              retries=$1; wait_sleep=$2; timeout=$3; shift && shift && shift
              for i in $(seq 1 $retries); do
                timeout $timeout $@ && break ||
                  if [ $i -eq $retries ]; then
                    return 1
                  else
                    sleep $wait_sleep
                  fi
              done
              echo Executed $i times
            }
            retrycmd_get_tarball() {
              tar_retries=$1; wait_sleep=$2; tarball=$3; url=$4
              echo "$tar_retries retries"
              for i in $(seq 1 $tar_retries); do
                tar -tzf $tarball && break ||
                  if [ $i -eq $tar_retries ]; then
                    return 1
                  else
                    timeout 60 curl -fsSL $url -o $tarball
                    sleep $wait_sleep
                  fi
              done
            }

            if [ -n "${KUBE_BINARY_URL}" ]; then
              retrycmd_get_tarball 120 5 /tmp/kube-binary.tar.gz ${KUBE_BINARY_URL} || exit 1
              # stop the kubelet on this node so we can replace it
              retrycmd 10 5 10 systemctl stop kubelet || exit 1
              tar -xzvf /tmp/kube-binary.tar.gz --strip-components=3 -C /usr/bin kubernetes/node/bin/kubelet || exit 1
              chmod +x /usr/bin/kubelet || exit 1
              retrycmd 10 5 10 systemctl start kubelet || exit 1
            fi
        - path: /etc/kubernetes/azure.json
          owner: "root:root"
          permissions: "0644"
          contentFrom:
            secret:
              key: control-plane-azure.json
              name: ${CLUSTER_NAME}-control-plane-azure-json
